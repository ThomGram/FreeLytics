import sys
import unittest
from pathlib import Path

from scrapy.http import HtmlResponse
from scrapy_freework.spiders.freework_spider import FreeworkSpider

# Add the parent directory to the path so we can import the spider
sys.path.append(str(Path(__file__).parent.parent))


class TestFreeworkSpiderParsing(unittest.TestCase):
    """Tests for HTML parsing functionality in FreeworkSpider."""

    def setUp(self):
        """Set up test fixtures."""
        self.spider = FreeworkSpider()
        self.test_fixtures_dir = Path(__file__).parent / "fixtures"

    def _create_response(self, html_file, url="http://example.com"):
        """Helper to create a Scrapy response from HTML fixture."""
        html_path = self.test_fixtures_dir / html_file
        with open(html_path, "r", encoding="utf-8") as f:
            html_content = f.read()

        return HtmlResponse(url=url, body=html_content.encode("utf-8"), encoding="utf-8")

    def test_get_icon_field_mapping(self):
        """Test that icon field mapping contains expected mappings."""
        mapping = self.spider.get_icon_field_mapping()

        # Check that all expected field types are present
        expected_fields = {
            "start_date",
            "duration",
            "salary",
            "experience",
            "remote_work",
            "location",
        }
        actual_fields = set(mapping.values())

        self.assertEqual(expected_fields, actual_fields)

        # Check that mapping has correct number of entries
        self.assertEqual(len(mapping), 6)

        # Check specific mappings exist
        self.assertIn("start_date", mapping.values())
        self.assertIn("salary", mapping.values())
        self.assertIn("location", mapping.values())

    def test_parse_job_listings(self):
        """Test parsing of job listing pages."""
        response = self._create_response("job_listing_page.html")

        # Get all requests generated by parse method
        requests = list(self.spider.parse(response))

        # Should generate one request for the job detail page
        self.assertEqual(len(requests), 1)

        request = requests[0]
        self.assertEqual(
            request.url, "http://example.com/fr/tech-it/data-scientist/job-mission/test-job-1"
        )
        self.assertEqual(request.callback, self.spider.parse_job_detail)

    def test_parse_job_detail_full(self):
        """Test parsing a complete job detail page."""
        response = self._create_response("job_detail_full.html")

        # Parse the job detail
        results = list(self.spider.parse_job_detail(response))

        # Should yield one job item
        self.assertEqual(len(results), 1)

        job = results[0]

        # Check basic job information
        self.assertEqual(job["job_title"], "Senior Data Scientist")
        self.assertEqual(job["company_name"], "TechCorp Inc.")
        self.assertEqual(job["job_url"], "http://example.com")

        # Check contract types
        self.assertIn("CDI", job["contract_types"])
        self.assertIn("Freelance", job["contract_types"])

        # Check skills extraction
        expected_skills = ["Python", "Machine Learning", "SQL"]
        self.assertEqual(job["skills"], expected_skills)

        # Check sidebar data extraction
        self.assertEqual(job["start_date"], "01/09/2025")
        self.assertEqual(job["duration"], "6 mois")
        self.assertEqual(job["salary"], "60k-80k €⁄an")
        self.assertEqual(job["daily_rate"], "500-700 €⁄j")
        self.assertEqual(job["experience"], "5+ years experience")
        self.assertEqual(job["remote_work"], "Télétravail partiel")
        self.assertEqual(job["location"], "Paris, France")

    def test_parse_job_detail_salary_tjm_splitting(self):
        """Test that combined salary/TJM values are split correctly."""
        response = self._create_response("job_detail_full.html")

        results = list(self.spider.parse_job_detail(response))
        job = results[0]

        # The fixture contains "60k-80k €⁄an, 500-700 €⁄j"
        self.assertEqual(job["salary"], "60k-80k €⁄an")
        self.assertEqual(job["daily_rate"], "500-700 €⁄j")

    def test_parse_job_detail_description_extraction(self):
        """Test extraction of job description paragraphs."""
        response = self._create_response("job_detail_full.html")

        results = list(self.spider.parse_job_detail(response))
        job = results[0]

        # Should extract description as HTML content
        self.assertIsInstance(job["description"], list)
        self.assertGreater(len(job["description"]), 0)

    def test_parse_job_detail_company_description(self):
        """Test extraction of company description."""
        response = self._create_response("job_detail_full.html")

        results = list(self.spider.parse_job_detail(response))
        job = results[0]

        # Should extract company information
        self.assertIsInstance(job["company_description"], list)

    def test_parse_job_detail_missing_fields(self):
        """Test parsing when some fields are missing."""
        # Create minimal HTML with missing sidebar
        minimal_html = """
        <html>
        <body>
            <h1>Test Job</h1>
            <p class="font-semibold text-sm">Test Company</p>
        </body>
        </html>
        """

        response = HtmlResponse(
            url="http://example.com", body=minimal_html.encode("utf-8"), encoding="utf-8"
        )

        results = list(self.spider.parse_job_detail(response))
        job = results[0]

        # Should handle missing fields gracefully
        self.assertEqual(job["job_title"], "Test Job")
        self.assertEqual(job["company_name"], "Test Company")
        self.assertEqual(job["start_date"], "")
        self.assertEqual(job["salary"], "")
        self.assertEqual(job["location"], "")
        self.assertEqual(job["skills"], [])

    def test_parse_job_detail_error_handling(self):
        """Test error handling when parsing fails."""
        # Create malformed HTML that will cause parsing errors
        malformed_html = "<html><body><h1>Incomplete"

        response = HtmlResponse(
            url="http://example.com", body=malformed_html.encode("utf-8"), encoding="utf-8"
        )

        with self.assertLogs(level="ERROR"):
            results = list(self.spider.parse_job_detail(response))

            # Should still yield a result with error information
            self.assertEqual(len(results), 1)
            job = results[0]
            self.assertIn("error", job)

    def test_salary_only_extraction(self):
        """Test extraction when only salary (no TJM) is present."""
        # Create test HTML with salary only
        salary_only_html = """
        <html>
        <body>
            <h1>Test Job</h1>
            <aside class="sticky">
                <div class="grid">
                    <div class="flex items-center py-1">
                        <svg><path d="M88 32C39.4 32 0 71.4 0 120V392c0 48.6 39.4 88 88 88H424c48.6 0 88-39.4 88-88V216"></path></svg>
                        <span class="w-full text-sm line-clamp-2">50k-60k €⁄an</span>
                    </div>
                </div>
            </aside>
        </body>
        </html>
        """

        response = HtmlResponse(
            url="http://example.com", body=salary_only_html.encode("utf-8"), encoding="utf-8"
        )

        results = list(self.spider.parse_job_detail(response))
        job = results[0]

        self.assertEqual(job["salary"], "50k-60k €⁄an")
        self.assertEqual(job["daily_rate"], "")

    def test_tjm_only_extraction(self):
        """Test extraction when only TJM (no salary) is present."""
        # Create test HTML with TJM only
        tjm_only_html = """
        <html>
        <body>
            <h1>Test Job</h1>
            <aside class="sticky">
                <div class="grid">
                    <div class="flex items-center py-1">
                        <svg><path d="M88 32C39.4 32 0 71.4 0 120V392c0 48.6 39.4 88 88 88H424c48.6 0 88-39.4 88-88V216"></path></svg>
                        <span class="w-full text-sm line-clamp-2">400-500 €⁄j</span>
                    </div>
                </div>
            </aside>
        </body>
        </html>
        """

        response = HtmlResponse(
            url="http://example.com", body=tjm_only_html.encode("utf-8"), encoding="utf-8"
        )

        results = list(self.spider.parse_job_detail(response))
        job = results[0]

        self.assertEqual(job["salary"], "")
        self.assertEqual(job["daily_rate"], "400-500 €⁄j")


if __name__ == "__main__":
    unittest.main()
